<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.0.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>news_api</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>news_api</name>
    <description>news_api</description>
    <properties>
        <java.version>17</java.version>
        <source.version>17</source.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>org.mariadb.jdbc</groupId>-->
<!--            <artifactId>mariadb-java-client</artifactId>-->
<!--            <scope>runtime</scope>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>com.baomidou</groupId>-->
<!--            <artifactId>mybatis-plus-boot-starter</artifactId>-->
<!--            <version>3.5.3</version>-->
<!--        </dependency>-->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.10.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>31.1-jre</version>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>test</id>
            <properties>
                <release.file>src/main/assembly/release-test.xml</release.file>
                <env>test</env>
            </properties>
        </profile>
        <!-- 生产 -->
        <profile>
            <id>production</id>
            <properties>
                <release.file>src/main/assembly/release-production.xml</release.file>
                <env>production</env>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <!-- 生成的jar中，包含pom.xml和pom.properties这两个文件 -->
                        <addMavenDescriptor>true</addMavenDescriptor>
                        <!-- 生成MANIFEST.MF的设置 -->
                        <manifest>
                            <!--这个属性特别关键，如果没有这个属性，有时候我们引用的包maven库
                            下面可能会有多个包，并且只有一个是正确的，其余的可能是带时间戳的，
                            此时会在classpath下面把那个带时间戳的给添加上去，
                            然后我们 在依赖打包的时候，打的是正确的，所以两头会对不上，报错。 -->
                            <useUniqueVersions>false</useUniqueVersions>
                            <!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 -->
                            <addClasspath>true</addClasspath>
                            <!-- 这个jar所依赖的jar包添加classPath的时候的前缀，如果这个jar本身
                            和依赖包在同一级目录，则不需要添加 -->
                            <classpathPrefix>lib/</classpathPrefix>
                            <!-- jar启动入口类 -->
                            <mainClass>com.example.news_api.NewsApiApplication</mainClass>
                        </manifest>
                        <manifestEntries>
                            <!-- 在Class-Path下添加配置文件的路径 -->
                            <Class-Path>../config/</Class-Path>
                            <!-- 假如这个项目可能要引入一些外部资源，但是你打包的时候并不想把
                            这些资源文件打进包里面，这个时候你必须在这边额外指定一些这些资源
                            文件的路径，这个位置指定的话，要根据你预期的这些位置去设置，我这边
                            所有jar都在lib下，资源文件都在config下，lib和config是同级的
                            同时还需要注意另外一个问题，假如你的pom文件里面配置了
                            <scope>system</scope>,就是你依赖是你本地的资源，这个时候使用
                            这个插件，classPath里面是不会添加，所以你得手动把这个依赖添加进
                            这个地方，用空格隔开就行 -->
                        </manifestEntries>
                    </archive>
                    <!-- jar包的位置 -->
                    <outputDirectory>${project.build.directory}/lib</outputDirectory>
                    <includes>
                        <!-- 打jar包时，打包class文件和config目录下面的 properties文件 -->
                        <!-- 有时候可能需要一些其他文件，这边可以配置，包括剔除的文件等等 -->
                        <include>**/*.class</include>
                        <include>**/*.properties</include>
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>target/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <includeScope>compile</includeScope>
                            <excludeGroupIds>org.luaj</excludeGroupIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-resources-plugin</artifactId>-->
<!--            </plugin>-->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-surefire-plugin</artifactId>-->
<!--                <configuration>-->
<!--                    <skip>true</skip>-->
<!--                </configuration>-->
<!--            </plugin>-->
<!--             将jar包和外部配置等文件整体打包(zip,tar,tar.gz等)-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <!-- jar包名称 -->
                    <finalName>${project.artifactId}-${env}-${project.version}</finalName>
                </configuration>
                <executions>
                    <execution>
                        <id>full</id>
                        <!-- 绑定到package生命周期阶段上 -->
                        <phase>package</phase>
                        <goals>
                            <!-- 只运行一次 -->
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <finalName>news-api-${env}</finalName>
                            <appendAssemblyId>false</appendAssemblyId>
                            <descriptors>
                                <!-- 描述文件路径 -->
                                <descriptor>${release.file}</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${source.version}</source>
                    <target>${source.version}</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
